/*-----------------------------------------------------------------------------
	ColdFire Macro Assembler and Simulator

	Copyright (C) 2007-2012 Mike Kowalski

	See License.txt for more details
-----------------------------------------------------------------------------*/

#pragma once
#ifndef _binary_program_h_
#define _binary_program_h_

#include "Types.h"
#include "Import.h"
#include "Isa.h"

namespace cf {

class BinaryProgramRange;

// Binary code generated by assembler;
// code is remembered in fragments that were established by using ORG directive
//
class CF_DECL BinaryProgram
{
public:
	BinaryProgram();
	~BinaryProgram();

	// used by assembler to generate code
	void PutByte(uint32 origin, uint8 byte);
	void PutWord(uint32 origin, uint16 word);
	void PutLongWord(uint32 origin, uint32 lword);

	bool Valid() const;

	// address were to start program from
	uint32 GetProgramStart() const;
	void SetProgramStart(uint32 start);

	// ISA this code was assembled for
	ISA GetIsa() const;
	void SetIsa(ISA isa);

	// TODO: debug info
	//

	// if not empty, this is address of first/last byte of code
	uint32 FirstByteAddress() const;
	uint32 LastByteAddress() const;

	// copy
	BinaryProgram& operator = (const BinaryProgram& src);

	// move is OK
	BinaryProgram(BinaryProgram&& p);
	BinaryProgram& operator = (BinaryProgram&& p);

private:
	BinaryProgram(const BinaryProgram&);

	struct Impl;
	Impl* impl_;

	// iterator
	friend class BinaryProgramRange;
};


// Access to the binary code in chunks/fragments
//
class CF_DECL BinaryProgramRange
{
public:
	BinaryProgramRange(const BinaryProgram& code);

	// true if fragment is valid
	operator bool () const;
	// get next fragment
	void operator ++ ();

	// fragment data
	std::vector<uint8> Fragment() const;
	// fragment starting address
	uint32 Address() const;

	std::pair<uint32, uint32> Range() const;

private:
	BinaryProgramRange(const BinaryProgramRange&);
	BinaryProgramRange& operator = (const BinaryProgramRange&);

	struct Impl;
	Impl* impl_;
};


// load CF binary program in CFB format
CF_DECL BinaryProgram LoadBinaryProgram(const wchar_t* path);

// load raw binary file that contains CF assembly
CF_DECL BinaryProgram LoadBinaryCode(const wchar_t* path, ISA isa, uint32 begin);

CF_DECL void SaveBinaryCode(const wchar_t* path, const BinaryProgram& code);

} // namespace cf

#endif

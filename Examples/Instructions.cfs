; Title: Test of CF instructions in ISA_C/B/A

	*= $10000

Start:
	; terminate program
	clr.w -(sp)
	trap #15

	; test assembling below instructions
	; addressing modes are not exhaustive

	add.l d0, d1
	add.l #10, d0
	add.l (a0), d0
	add.l d1, (a1)

	add.l d1, a1
	adda.l d1, a1

	addq.l #1, d0
	addq.l #1, (a0)
	addq.l #2, 4(a0)
	addq.l #4, (a0)
	addq.l #8, 4(a0, d0*4)

	and.l d0, d1
	and.l d0, (a1)
	and.l #1, d0
	andi.l #1, d0

	or.l d0, d1
	or.l d0, (a1)
	or.l #1, d0
	ori.l #1, d0

	eor.l d0, d1
	eor.l d0, (a1)
	eori.l #-1, d1

	btst.l #1, d0
	bchg.l #1, d0
	bset.l #1, d0
	bclr.l #1, d0

	btst.b #1, (a0)
	bchg.b #1, (a0)
	bset.b #1, (a0)
	bclr.b #1, (a0)

	btst.b d0, (a0)
	btst.l d0, d1
.test
	bitrev.l d4

	beq.s .test
	bne.s .test
	bra.s .test
	bpl.s .test
	bmi.s .test
	bsr.s .test
	bvc.s .test
	bvs.s .test
	bcc.s .test
	bcs.s .test
	blo.s .test
	bhi.s .test
	bgt.s .test
	ble.s .test
	bls.s .test
	bge.s .test

	clr.b (a0)
	clr.w 0(a0)
	clr.l 4(a0)

	cmp.b #1, d0
	cmp.b (a0), d1
	cmp.w #$200, d0
	cmp.w $200(a0), d0
	cmp.l #$10000, d0
	cmp.l $100(a1), d1

	cmpa.l #0, a0
	cmpi.l #10, d0

	; not imlemented yet
	; cpushl bc, (a0)

	divs.w d0, d1
	divs.l d0, d1
	divs.w (a0)+, d1
	divs.w .test(pc), d1

	divu.w d0, d1
	divu.l d0, d1
	divu.w (a0)+, d1
	divu.w .test(pc), d1

	rems.l -(a1), d0:d1
	remu.l (a1)+, d0:d1

	ext.w d1
	ext.l d1
	ext d1
	extb d0

	ff1 d1

	halt	; currently terminates execution

	illegal

	intouch (a0)

	jmp .test
	jmp $10203040
	jmp 4(a0, a3*4)

	jsr .test
	jsr $10203040
	jsr 4(a0, a3*4)

	lea 4(a0), a1
	lea (a1), a2
	lea 16(a2, d1), a3
	lea .test(pc), a0
	lea -1.w, a0
	lea $12340000, a1

	pea 4(a0)
	pea (a1)
	pea 16(a2, d1)
	pea .test(pc)
	pea -1.w
	pea $12340000

	link a4, #-10
	link a4, #30
	unlk a4

	mvz.w (a0), d1
	mvz.b 1(a0), d1
	mvs.w (a0), d2
	mvs.b 1(a0), d2

	move.l #1, d0
	move.w #1, d0
	move.b #1, d0
	move.l (a0), (a1)
	move.w (a0), (a1)
	move.b (a0), (a1)
	move.l .test(pc), 4(a1)

	movea.w #1, a0
	movea.l #1, a0

	movec.l d0, vbr
	movec.l a0, rambar0

	movem.l d0-d7/a3, 40(a0)
	movem.l (a0), d0-d7/a5/a4/a0-a1

	moveq #127, d1
	moveq #-128, d1

	move d0, sr
	move #$2700, sr

	muls.w d0, d1
	muls.l d0, d1
	muls.w (a0)+, d1
	muls.w .test(pc), d1

	mulu.w d0, d1
	mulu.l d0, d1
	mulu.w (a0)+, d1
	mulu.w .test(pc), d1

	nop

	not d0
	neg d0

	pulse

	rts
	rte

	sats d1

	seq d0
	sne d0
	spl d0
	smi d0
	svc d0
	svs d0
	scc d0
	scs d0
	shi d0
	slo d0
	sge d0
	sgt d0
	sle d0
	slt d0

	asl.l #1, d0
	asl.l d1, d0
	lsl.l #2, d0
	lsl.l d1, d0
	asr.l #4, d0
	asr.l d1, d0
	lsr.l #8, d0
	lsr.l d1, d0

	stop #$2400

	tst.b (a0)
	tst.w d0
	tst.l a0

	tas.b (a0)
	tas.b 3(a0)
	tas.b 2(a0, d0)
	tas.b 1.w
	tas.b 100000

	sub.l d0, d1
	sub.l #10, d0
	sub.l (a0), d0
	sub.l d1, (a1)

	sub.l d1, a1
	suba.l d1, a1

	subq.l #1, d0
	subq.l #1, (a0)
	subq.l #2, 4(a0)
	subq.l #4, (a0)
	subq.l #8, 4(a0, d0*4)

	swap.w d1

	tpf
	tpf .skip
	moveq #12, d0
.skip
	tpf .skip2
	move.w #123, d0
.skip2

	trap #0
	trap #15

	wddata (a0)
	wddata.b 10(a0)
	wddata.w -(a0)
	wddata.l (a0)+

	end Start
